@import './breakpoint';
// Media queries
$grid-breakpoints: (
    sm: 576px,
    md: 768px,
    lg: 992px,
    xl: 1200px,
    xxl:1400px
);

@mixin media( $size,$type : min) {
    @if map-has-key($grid-breakpoints, $size ) {

        $width : map-get($grid-breakpoints, $size);

        @if $type ==max {
            $width : $width - 1;
        }

        @media only screen and (#{$type}-width : $width) {
            @content ;
        }

    }
}

@mixin media-between($lower, $upper) {
    @if map-has-key($grid-breakpoints, $lower ) and map-has-key($grid-breakpoints, $upper ) {
        $lower-breakpoint: map-get($grid-breakpoints, $lower);
        $upper-breakpoint: map-get($grid-breakpoints, $upper);

        @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
            @content;
        }
    }
}
//  pseudo element
@mixin pseudo($content: '', $pos: absolute, $display: block) {
    content: $content;
    display: $display;
    position: $pos;
}

@function   border($color) { 
    @return  1px solid $color ;
}
@mixin vertical-center($po: absolute) {
    -ms-transform: translateY(-50%);
    -webkit-transform: translateY(-50%);
    transform: translateY(-50%);
    position: $po;
    top: 50%;
}

@mixin horizontal-center($po: absolute) {
    -ms-transform: translateX(-50%);
    -webkit-transform: translateX(-50%);
    transform: translateX(-50%);
    position: $po;
    left: 50%;
}

@mixin transform-center($po : absolute) {
    -ms-transform: translate(-50%, -50%);
    -webkit-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
    position: $po;
    left: 50%;
    top: 50%
}

@mixin keyframes($name) {
    @-webkit-keyframes #{$name} {
        @content;
    }

    @-moz-keyframes #{$name} {
        @content;
    }

    @-ms-keyframes #{$name} {
        @content;
    }

    @-o-keyframes #{$name} {
        @content;
    }

    @keyframes #{$name} {
        @content;
    }
}

// my triangle
@mixin triangle ($size, $color, $direction) {
    height: 0;
    width: 0;

    $width: nth($size, 1);
    $height: nth($size, length($size));

    $foreground-color: nth($color, 1);
    $background-color: if(length($color)==2, nth($color, 2), transparent);

    @if ($direction ==up) or ($direction ==down) or ($direction ==right) or ($direction ==left) {

        $width: $width / 2;
        $height: if(length($size) > 1, $height, $height/2);

        @if $direction ==up {
            border-bottom: $height solid $foreground-color;
            border-left: $width solid $background-color;
            border-right: $width solid $background-color;

        }

        @else if $direction ==right {
            border-bottom: $width solid $background-color;
            border-left: $height solid $foreground-color;
            border-top: $width solid $background-color;

        }

        @else if $direction ==down {
            border-left: $width solid $background-color;
            border-right: $width solid $background-color;
            border-top: $height solid $foreground-color;

        }

        @else if $direction ==left {
            border-bottom: $width solid $background-color;
            border-right: $height solid $foreground-color;
            border-top: $width solid $background-color;
        }
    }

    @else if ($direction ==up-right) or ($direction ==up-left) {
        border-top: $height solid $foreground-color;

        @if $direction ==up-right {
            border-left: $width solid $background-color;

        }

        @else if $direction ==up-left {
            border-right: $width solid $background-color;
        }
    }

    @else if ($direction ==down-right) or ($direction ==down-left) {
        border-bottom: $height solid $foreground-color;

        @if $direction ==down-right {
            border-left: $width solid $background-color;

        }

        @else if $direction ==down-left {
            border-right: $width solid $background-color;
        }
    }

    @else if ($direction ==inset-up) {
        border-color: $background-color $background-color $foreground-color;
        border-style: solid;
        border-width: $height $width;
    }

    @else if ($direction ==inset-down) {
        border-color: $foreground-color $background-color $background-color;
        border-style: solid;
        border-width: $height $width;
    }

    @else if ($direction ==inset-right) {
        border-color: $background-color $background-color $background-color $foreground-color;
        border-style: solid;
        border-width: $width $height;
    }

    @else if ($direction ==inset-left) {
        border-color: $background-color $foreground-color $background-color $background-color;
    }
}

//  to rgba    function 
@function torgb($color) {
    @return red($color)+','+green($color)+', '+blue($color);
}

@function torgb($color) {
    @return rgb(red($color), green($color), blue($color));
}

@function torgba($color, $alpha: 1) {
    @return rgba(torgb($color), $alpha);
}

//  end to  rgba  function 

@function half($el) {
    @return calc($el/2);
}

@function double($el) {
    @return calc($el * 2);
}

/* -------------------------------------------- */

@function makelongshadow($color) {
    $val: 0px 0px $color;

    @for $i from 1 through 10 {
        $val: #{$val},
        #{$i}px #{$i}px #{$color};
    }

    @return $val;
}

@mixin longshadow($color) {
    text-shadow: makelongshadow($color);
}

//-------------------  ------------------------------
//-------------------  ------------------------------
@mixin fade($type) {

    @if $type =='hide' {
        visibility: hidden;
        opacity: 0;
        transition: visibility 1s, opacity 1s;
    }

    @else if $type =='show' {
        visibility: visible;
        opacity: 1;
        transition: visibility 1s, opacity 1s;
    }

}

//----------------

// --------------------------------
//-------------------------------------------------
@function black($opacity) {
    @return rgba(0, 0, 0, $opacity);
}

@function white($opacity) {
    @return rgba(255, 255, 255, $opacity);
}

//  end     white  black  opacity 
@mixin clearfix() {
    &::after {
        display: table;
        content: "";
        clear: both;
    }
}

// box shadow  
@mixin background-fill($initial, $hover, $inverted: false) {
    background: linear-gradient(90deg,
            $hover 50%,
            $initial 50%);
    background-repeat: no-repeat;
    background-size: 200% 100%;
    background-position: right bottom;

    @if $inverted {
        background-position: left bottom;
    }

    &:hover {
        background-position: left bottom;

        @if $inverted {
            background-position: right bottom;
        }
    }
}

@mixin text-truncate() {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

@mixin overlay($color:black , $opacity:.5) {
    height: 100%;
    width: 100%;
    top: 0;
    left: 0;
    background-color: rgba($color, $opacity);

}

// Shared between modals and offcanvases
@mixin page-overlay($bg, $opacity , $zindex) {
    background-color: $bg;
    z-index: $zindex;
    position: fixed;
    height: 100vh;
    width: 100vw;
    display: none;
    left: 0;
    top: 0;
    opacity: 0;

    // Fade for backdrop
    &.show {
        opacity: $opacity;
        display: block;
    }
}

// calculaion  mixins 


@mixin flex-column {
    display: flex;
    flex-direction: column;
}

@mixin flex-center {
    display: flex;
    align-items: center;
    justify-content: center;
}

@mixin flex-center-column {
    @include flex-center;
    flex-direction: column;
}

@mixin flex-center-vert {
    display: flex;
    align-items: center;
}

@mixin flex-center-horiz {
    display: flex;
    justify-content: center;
}

@mixin center-margin {
    margin-left: auto;
    margin-right: auto;
}
@mixin flex($ai:flex-start ,$jc:flex-start ,$fd:row) {
    display: flex;
    align-items: $ai;
    justify-content: $jc;
    flex-direction: $fd;
}
@mixin grid($min:300px , $max:1fr , $gap : 20px) {
    display: grid;
    grid-template-columns: repeat(auto-fit,minmax($min ,$max));
    gap: $gap;

}

@mixin  flex-between {
    display: flex;
    justify-content: space-between;
    align-items: center;
}
